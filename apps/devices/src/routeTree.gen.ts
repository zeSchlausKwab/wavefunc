/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as LibraryImport } from './routes/library'
import { Route as LegacyImport } from './routes/legacy'
import { Route as FavouritesImport } from './routes/favourites'
import { Route as DiscoverImport } from './routes/discover'
import { Route as CommunityImport } from './routes/community'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as StationNaddrImport } from './routes/station/$naddr'
import { Route as ProfileProfileIdImport } from './routes/profile.$profileId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => rootRoute,
} as any)

const LibraryRoute = LibraryImport.update({
    id: '/library',
    path: '/library',
    getParentRoute: () => rootRoute,
} as any)

const LegacyRoute = LegacyImport.update({
    id: '/legacy',
    path: '/legacy',
    getParentRoute: () => rootRoute,
} as any)

const FavouritesRoute = FavouritesImport.update({
    id: '/favourites',
    path: '/favourites',
    getParentRoute: () => rootRoute,
} as any)

const DiscoverRoute = DiscoverImport.update({
    id: '/discover',
    path: '/discover',
    getParentRoute: () => rootRoute,
} as any)

const CommunityRoute = CommunityImport.update({
    id: '/community',
    path: '/community',
    getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
    id: '/about',
    path: '/about',
    getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => rootRoute,
} as any)

const StationNaddrRoute = StationNaddrImport.update({
    id: '/station/$naddr',
    path: '/station/$naddr',
    getParentRoute: () => rootRoute,
} as any)

const ProfileProfileIdRoute = ProfileProfileIdImport.update({
    id: '/profile/$profileId',
    path: '/profile/$profileId',
    getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            id: '/'
            path: '/'
            fullPath: '/'
            preLoaderRoute: typeof IndexImport
            parentRoute: typeof rootRoute
        }
        '/about': {
            id: '/about'
            path: '/about'
            fullPath: '/about'
            preLoaderRoute: typeof AboutImport
            parentRoute: typeof rootRoute
        }
        '/community': {
            id: '/community'
            path: '/community'
            fullPath: '/community'
            preLoaderRoute: typeof CommunityImport
            parentRoute: typeof rootRoute
        }
        '/discover': {
            id: '/discover'
            path: '/discover'
            fullPath: '/discover'
            preLoaderRoute: typeof DiscoverImport
            parentRoute: typeof rootRoute
        }
        '/favourites': {
            id: '/favourites'
            path: '/favourites'
            fullPath: '/favourites'
            preLoaderRoute: typeof FavouritesImport
            parentRoute: typeof rootRoute
        }
        '/legacy': {
            id: '/legacy'
            path: '/legacy'
            fullPath: '/legacy'
            preLoaderRoute: typeof LegacyImport
            parentRoute: typeof rootRoute
        }
        '/library': {
            id: '/library'
            path: '/library'
            fullPath: '/library'
            preLoaderRoute: typeof LibraryImport
            parentRoute: typeof rootRoute
        }
        '/settings': {
            id: '/settings'
            path: '/settings'
            fullPath: '/settings'
            preLoaderRoute: typeof SettingsImport
            parentRoute: typeof rootRoute
        }
        '/profile/$profileId': {
            id: '/profile/$profileId'
            path: '/profile/$profileId'
            fullPath: '/profile/$profileId'
            preLoaderRoute: typeof ProfileProfileIdImport
            parentRoute: typeof rootRoute
        }
        '/station/$naddr': {
            id: '/station/$naddr'
            path: '/station/$naddr'
            fullPath: '/station/$naddr'
            preLoaderRoute: typeof StationNaddrImport
            parentRoute: typeof rootRoute
        }
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    '/': typeof IndexRoute
    '/about': typeof AboutRoute
    '/community': typeof CommunityRoute
    '/discover': typeof DiscoverRoute
    '/favourites': typeof FavouritesRoute
    '/legacy': typeof LegacyRoute
    '/library': typeof LibraryRoute
    '/settings': typeof SettingsRoute
    '/profile/$profileId': typeof ProfileProfileIdRoute
    '/station/$naddr': typeof StationNaddrRoute
}

export interface FileRoutesByTo {
    '/': typeof IndexRoute
    '/about': typeof AboutRoute
    '/community': typeof CommunityRoute
    '/discover': typeof DiscoverRoute
    '/favourites': typeof FavouritesRoute
    '/legacy': typeof LegacyRoute
    '/library': typeof LibraryRoute
    '/settings': typeof SettingsRoute
    '/profile/$profileId': typeof ProfileProfileIdRoute
    '/station/$naddr': typeof StationNaddrRoute
}

export interface FileRoutesById {
    __root__: typeof rootRoute
    '/': typeof IndexRoute
    '/about': typeof AboutRoute
    '/community': typeof CommunityRoute
    '/discover': typeof DiscoverRoute
    '/favourites': typeof FavouritesRoute
    '/legacy': typeof LegacyRoute
    '/library': typeof LibraryRoute
    '/settings': typeof SettingsRoute
    '/profile/$profileId': typeof ProfileProfileIdRoute
    '/station/$naddr': typeof StationNaddrRoute
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath
    fullPaths:
        | '/'
        | '/about'
        | '/community'
        | '/discover'
        | '/favourites'
        | '/legacy'
        | '/library'
        | '/settings'
        | '/profile/$profileId'
        | '/station/$naddr'
    fileRoutesByTo: FileRoutesByTo
    to:
        | '/'
        | '/about'
        | '/community'
        | '/discover'
        | '/favourites'
        | '/legacy'
        | '/library'
        | '/settings'
        | '/profile/$profileId'
        | '/station/$naddr'
    id:
        | '__root__'
        | '/'
        | '/about'
        | '/community'
        | '/discover'
        | '/favourites'
        | '/legacy'
        | '/library'
        | '/settings'
        | '/profile/$profileId'
        | '/station/$naddr'
    fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute
    AboutRoute: typeof AboutRoute
    CommunityRoute: typeof CommunityRoute
    DiscoverRoute: typeof DiscoverRoute
    FavouritesRoute: typeof FavouritesRoute
    LegacyRoute: typeof LegacyRoute
    LibraryRoute: typeof LibraryRoute
    SettingsRoute: typeof SettingsRoute
    ProfileProfileIdRoute: typeof ProfileProfileIdRoute
    StationNaddrRoute: typeof StationNaddrRoute
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    AboutRoute: AboutRoute,
    CommunityRoute: CommunityRoute,
    DiscoverRoute: DiscoverRoute,
    FavouritesRoute: FavouritesRoute,
    LegacyRoute: LegacyRoute,
    LibraryRoute: LibraryRoute,
    SettingsRoute: SettingsRoute,
    ProfileProfileIdRoute: ProfileProfileIdRoute,
    StationNaddrRoute: StationNaddrRoute,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/community",
        "/discover",
        "/favourites",
        "/legacy",
        "/library",
        "/settings",
        "/profile/$profileId",
        "/station/$naddr"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/community": {
      "filePath": "community.tsx"
    },
    "/discover": {
      "filePath": "discover.tsx"
    },
    "/favourites": {
      "filePath": "favourites.tsx"
    },
    "/legacy": {
      "filePath": "legacy.tsx"
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/profile/$profileId": {
      "filePath": "profile.$profileId.tsx"
    },
    "/station/$naddr": {
      "filePath": "station/$naddr.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
